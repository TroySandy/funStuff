
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./pixal.css">
    <title>Document</title>
</head>
<body>
    
<canvas id="canvas1"></canvas>



<script src="./pixal.js"></script>
</body>
</html>



*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background: black;
}

#canvas1{
    border: 2px solid white;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 800px;
    height: 533px;
    transform: translate(-50%, -50%);
}







// const canvas = document.getElementById('canvas1');
// const ctx = canvas.getContext('2d');
// canvas.width = 800;
// canvas.height = 533;

const myImage = new Image();
myImage.src ='pixalColor.jpg'


// draws img to canvas, scans for pixals, and redraws as pixals
// myImage.addEventListener('load', function(){
//     ctx.drawImage(myImage, 0, 0);
//     const scannedImage = ctx.getImageData(0, 0, canvas.width, canvas.height);
//     console.log(scannedImage);
//     const scannedData = scannedImage.data;
//     for(let i = 0; i < scannedData.length; i+= 4){
//         const total = scannedData[i] + scannedData[i+1] + scannedData[i+2];
//         const averageColorValue = total/3;
//         scannedData[i] = averageColorValue;
//         scannedData[i+1]=averageColorValue;
//         scannedData[i+2]=averageColorValue;
//     }
//     scannedImage.data = scannedData;
//     ctx.putImageData(scannedImage, 0, 0);
// })



B&W Pixal Rain
const myImage = new Image();
myImage.src = "updatedPic.jpg";
myImage.addEventListener("load", function () {
  const canvas = document.getElementById("canvas1");
  const ctx = canvas.getContext("2d");
  canvas.width = 800;
  canvas.height = 571;

  ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);
  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);
  ctx.clearRect(0,0, canvas.width, canvas.height)

  let particlesArray = [];
  const numberOfParticles = 10000;

  let mappedImage = [];
  for (let y = 0; y < canvas.height; y++) {
    let row = [];
    for (let x = 0; x < canvas.width; x++) {
      const red = pixels.data[(y * 4 * pixels.width) + (x * 4)];
      const green = pixels.data[(y * 4 * pixels.width) + (x * 4 + 1)];
      const blue = pixels.data[(y * 4 * pixels.width) + (x * 4 + 2)];
      const brightness = calculateRelativeBrightness(red, green, blue);
      const cell = [
        cellBrightness = brightness
      ];
      row.push(cell);
    }
    mappedImage.push(row);
  }
console.log(mappedImage);
  function calculateRelativeBrightness(red, green, blue) {
    return Math.sqrt(
      (red * red) * 0.299 + (green * green) * 0.587 + (blue * blue) * 0.114
    )/100
  }

  class Particle {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = 0;
      this.speed = 0;
      this.velocity = Math.random() * 0.5;
      this.size = Math.random() * 1.5;
      this.position1 = Math.floor(this.y);
      this.position2 = Math.floor(this.x);
    }
    
    update() {
      this.position1 = Math.floor(this.y);
      this.position2 = Math.floor(this.x);
      this.speed = mappedImage[this.position1][this.position2][0];
      let movement = (2.5 - this.speed) + this.velocity;

      this.y += movement;
      if (this.y >= canvas.height) {
        this.y = 0;
        this.x = Math.random() * canvas.width;
      }
    }
    draw() {
      ctx.beginPath();
      ctx.fillStyle = "white";
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }
  function init() {
    for (let i = 0; i < numberOfParticles; i++) {
      particlesArray.push(new Particle());
    }
  }
  init();
  function animate() {
    ctx.globalAlpha = 0.05;
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.globalAlpha = 0.1;
    for (let i = 0; i < particlesArray.length; i++) {
      particlesArray[i].update();
      ctx.globalAlpha = particlesArray[i].speed * 0.5;
      particlesArray[i].draw();
    }
    requestAnimationFrame(animate);
  }
  animate();
});


// const myImage = new Image();
// myImage.src = "turtle.jpg";
// myImage.addEventListener("load", function () {
//   const canvas = document.getElementById("canvas1");
//   const ctx = canvas.getContext("2d");
//   canvas.width = 1000;
//   canvas.height = 667;
//   // const gradient1 = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
//   // gradient1.addColorStop(0.2, 'pink');
//   // gradient1.addColorStop(0.3, 'red');
//   // gradient1.addColorStop(0.4, 'orange');  adds color gradient
//   // gradient1.addColorStop(0.5, 'yellow');
//   // gradient1.addColorStop(0.6, 'green');
//   // gradient1.addColorStop(0.7, 'turquoise');
//   // gradient1.addColorStop(0.8, 'violet');


//   ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);
//   const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);
//   ctx.clearRect(0,0, canvas.width, canvas.height)

//   let particlesArray = [];
//   const numberOfParticles = 5000;

//   let mappedImage = [];
//   for (let y = 0; y < canvas.height; y++) {
//     let row = [];
//     for (let x = 0; x < canvas.width; x++) {
//       const red = pixels.data[(y * 4 * pixels.width) + (x * 4)];
//       const green = pixels.data[(y * 4 * pixels.width) + (x * 4 + 1)];
//       const blue = pixels.data[(y * 4 * pixels.width) + (x * 4 + 2)];
//       const brightness = calculateRelativeBrightness(red, green, blue);
//       const cell = [
//         cellBrightness = brightness,
//         cellColor = `rgb(${red}, ${green}, ${blue})`
//       ];
//       row.push(cell);
//     }
//     mappedImage.push(row);
//   }
// console.log(mappedImage);
//   function calculateRelativeBrightness(red, green, blue) {
//     return Math.sqrt(
//       (red * red) * 0.299 + (green * green) * 0.587 + (blue * blue) * 0.114
//     )/100
//   }

//   class Particle {
//     constructor() {
//       this.x = Math.random() * canvas.width;
//       this.y = 0;
//       this.speed = 0;
//       this.velocity = Math.random() * .5;
//       this.size = Math.random() * 2.5;
//       this.position1 = Math.floor(this.y);
//       this.position2 = Math.floor(this.x);
//       this.angle = 0;
//     }
    
//     update() {
//       this.position1 = Math.floor(this.y);
//       this.position2 = Math.floor(this.x);
//       if ((mappedImage[this.position1])&&(mappedImage[this.position1][this.position2])){
//       this.speed = mappedImage[this.position1][this.position2][0];
//     }
//       let movement = (1.5 - this.speed) + this.velocity;
//       this.angle+= this.speed/75;
//     this.size = this.speed * 1;
//     ctx.globalCompositeOperation = 'soft-light lighter'


//       this.y += movement + Math.sin(this.angle) * 2;
//       this.x += movement + Math.cos(this.angle) * 2;
//       if (this.y <= 0) {
//         this.y = canvas.height;
//         this.x = Math.random() * canvas.width;
//       }
//       if (this.x >= canvas.width) {
//         this.x = 0;
//         this.y = Math.random() * canvas.height;
//       }
//     }
//     draw() {
//       ctx.beginPath();
//       if ((mappedImage[this.position1])&&(mappedImage[this.position1][this.position2])){
//       ctx.fillStyle = mappedImage[this.position1][this.position2][1];
//       ctx.strokeStyle = mappedImage[this.position1][this.position2][1];
//     }
//     //ctx.fillStyle = gradient1; //adds color gradient
//       ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
//       // ctx.strokeRect(this.x, this.y, this.size * 2, this.size *2)
//       ctx.fill();
//     }
//   }
//   function init() {
//     for (let i = 0; i < numberOfParticles; i++) {
//       particlesArray.push(new Particle());
//     }
//   }
//   init();
//   function animate() {
//     ctx.globalAlpha = 0.05;
//     ctx.fillStyle = "transparent";
//     ctx.fillRect(0, 0, canvas.width, canvas.height);
//     ctx.globalAlpha = 0.2;
//     for (let i = 0; i < particlesArray.length; i++) {
//       particlesArray[i].update();
//       ctx.globalAlpha = particlesArray[i].speed * 0.5;
//       particlesArray[i].draw();
//     }
//     requestAnimationFrame(animate);
//   }
//   animate();
// });
